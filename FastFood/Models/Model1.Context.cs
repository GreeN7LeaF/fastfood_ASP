//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FastFood.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class fastfood_dbEntities : DbContext
    {
        public fastfood_dbEntities()
            : base("name=fastfood_dbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<Calendar> Calendars { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<Export> Exports { get; set; }
        public virtual DbSet<Food> Foods { get; set; }
        public virtual DbSet<FoodType> FoodTypes { get; set; }
        public virtual DbSet<Import> Imports { get; set; }
        public virtual DbSet<Ingredient> Ingredients { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<Recipe> Recipes { get; set; }
        public virtual DbSet<Revenue> Revenues { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<AssignmentCalendar> AssignmentCalendars { get; set; }
        public virtual DbSet<BillDetail> BillDetails { get; set; }
        public virtual DbSet<CalendarDetail> CalendarDetails { get; set; }
        public virtual DbSet<ExportDetail> ExportDetails { get; set; }
        public virtual DbSet<ImportDetail> ImportDetails { get; set; }
    
        public virtual ObjectResult<getAllCalendar_Result> getAllCalendar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllCalendar_Result>("getAllCalendar");
        }
    
        public virtual ObjectResult<getAllExport_Result> getAllExport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllExport_Result>("getAllExport");
        }
    
        public virtual ObjectResult<getAllFood_Result> getAllFood()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllFood_Result>("getAllFood");
        }
    
        public virtual ObjectResult<getAllFoodDeleted_Result> getAllFoodDeleted()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllFoodDeleted_Result>("getAllFoodDeleted");
        }
    
        public virtual int getAllFoodNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getAllFoodNew");
        }
    
        public virtual ObjectResult<getAllFoodType_Result> getAllFoodType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllFoodType_Result>("getAllFoodType");
        }
    
        public virtual ObjectResult<getAllImport_Result> getAllImport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllImport_Result>("getAllImport");
        }
    
        public virtual ObjectResult<getAllIngredients_Result> getAllIngredients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllIngredients_Result>("getAllIngredients");
        }
    
        public virtual ObjectResult<getAllShift_Result> getAllShift()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllShift_Result>("getAllShift");
        }
    
        public virtual ObjectResult<getAllStaff_Result> getAllStaff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllStaff_Result>("getAllStaff");
        }
    
        public virtual ObjectResult<getAllSupplier_Result> getAllSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllSupplier_Result>("getAllSupplier");
        }
    
        public virtual ObjectResult<getAllUnit_Result> getAllUnit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllUnit_Result>("getAllUnit");
        }
    
        public virtual ObjectResult<getFoodById_Result> getFoodById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getFoodById_Result>("getFoodById", idParameter);
        }
    
        public virtual ObjectResult<getFoodByName_Result> getFoodByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getFoodByName_Result>("getFoodByName", nameParameter);
        }
    
        public virtual ObjectResult<getFoodByType_Result> getFoodByType(Nullable<int> typeid)
        {
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("typeid", typeid) :
                new ObjectParameter("typeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getFoodByType_Result>("getFoodByType", typeidParameter);
        }
    
        public virtual int getFoodNewByID(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getFoodNewByID", idParameter);
        }
    
        public virtual ObjectResult<getFoodTypeById_Result> getFoodTypeById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getFoodTypeById_Result>("getFoodTypeById", idParameter);
        }
    
        public virtual int sp_deleteAllFoodByFoodType(Nullable<int> typeid)
        {
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("typeid", typeid) :
                new ObjectParameter("typeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteAllFoodByFoodType", typeidParameter);
        }
    
        public virtual int sp_deleteFood(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteFood", idParameter);
        }
    
        public virtual int sp_deleteFoodPermanent(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteFoodPermanent", idParameter);
        }
    
        public virtual int sp_deleteFoodTypeAndFood(Nullable<int> typeid)
        {
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("typeid", typeid) :
                new ObjectParameter("typeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteFoodTypeAndFood", typeidParameter);
        }
    
        public virtual int sp_deleteFoodTypeOnly(Nullable<int> typeid)
        {
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("typeid", typeid) :
                new ObjectParameter("typeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteFoodTypeOnly", typeidParameter);
        }
    
        public virtual ObjectResult<sp_insertFood_Result> sp_insertFood(string name, Nullable<double> price, Nullable<int> type, Nullable<int> status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(double));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_insertFood_Result>("sp_insertFood", nameParameter, priceParameter, typeParameter, statusParameter);
        }
    
        public virtual int sp_insertFoodType(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertFoodType", nameParameter);
        }
    
        public virtual int sp_insertPosition(string name, Nullable<double> salary)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertPosition", nameParameter, salaryParameter);
        }
    
        public virtual int sp_insertStaff(Nullable<int> iD, string name, Nullable<System.DateTime> birth, Nullable<int> gender, Nullable<System.DateTime> startAt, Nullable<int> position)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var birthParameter = birth.HasValue ?
                new ObjectParameter("Birth", birth) :
                new ObjectParameter("Birth", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var startAtParameter = startAt.HasValue ?
                new ObjectParameter("StartAt", startAt) :
                new ObjectParameter("StartAt", typeof(System.DateTime));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertStaff", iDParameter, nameParameter, birthParameter, genderParameter, startAtParameter, positionParameter);
        }
    
        public virtual int sp_insertUnit(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertUnit", nameParameter);
        }
    
        public virtual int sp_insertUser(string password, string phone, string email, Nullable<System.DateTime> created_at, Nullable<int> is_Admin)
        {
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var created_atParameter = created_at.HasValue ?
                new ObjectParameter("Created_at", created_at) :
                new ObjectParameter("Created_at", typeof(System.DateTime));
    
            var is_AdminParameter = is_Admin.HasValue ?
                new ObjectParameter("is_Admin", is_Admin) :
                new ObjectParameter("is_Admin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertUser", passwordParameter, phoneParameter, emailParameter, created_atParameter, is_AdminParameter);
        }
    
        public virtual int sp_updateFood(Nullable<int> id, string name, Nullable<double> price, Nullable<int> type, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(double));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updateFood", idParameter, nameParameter, priceParameter, typeParameter, statusParameter);
        }
    }
}
